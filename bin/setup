#!/bin/bash

set -e

PATH=$PATH:/bin/:/usr/local/sbin/:/usr/sbin/:/sbin/
GITEA_WORK_DIR=/var/lib/gitea

getBaseImage() {
  echo "docker://archlinux/base"
}

getBaseImageName() {
  echo "registry-1.docker.io/archlinux/base:latest"
}

installPkg() {
  pacman -Syu --noconfirm --needed wget iproute git sudo openssh unzip
}

downloadGiteaPkg() {
  [ -e /usr/bin/gitea ] && return

  echo Downloading gitea
  wget -nc https://dl.gitea.io/gitea/1.7.3/gitea-1.7.3-linux-amd64.xz \
       -O /usr/bin/gitea.xz
  xz -d /usr/bin/gitea.xz
  chmod 755 /usr/bin/gitea

  setcap CAP_NET_BIND_SERVICE=+eip /usr/sbin/gitea  # so that non root can bind ss

  mkdir -p /var/lib/gitea
  mount -o bind /root/gitea-box/gitea /var/lib/gitea
}

start() {
  setcap CAP_NET_BIND_SERVICE=+eip /usr/sbin/gitea

  pushd /home/gitea # you have to be in a directory that have a writeable .git
  sudo -u gitea GITEA_WORK_DIR=$GITEA_WORK_DIR GITEA_CUSTOM=$GITEA_WORK_DIR gitea
  popd
}

userSetup() {
  groupadd gitea || true
  useradd -m gitea -g gitea || true
}

launch() {
  build
  start 
}

backup() {
  mkdir -p $GITEA_WORK_DIR/backup/
  pushd $GITEA_WORK_DIR/backup/
  sudo -u gitea GITEA_WORK_DIR=$GITEA_WORK_DIR GITEA_CUSTOM=$GITEA_WORK_DIR gitea dump -c $GITEA_WORK_DIR/conf/app.ini
  popd
}

buildAci() {
  [ $USER == "root" ] && exit 1

 	_depCheck jq actool

  local uuid="$1"
  local project="$(basename `git rev-parse --show-toplevel`)"
  local acVersion=`date +%Y.%m.%d`
  local version=`date +%Y%m%d`
  local created=`date -Is`
  local outputAci=$project-$version.aci
  echo Building Aci

  echo ensuring stoppage 
  sudo rkt stop $uuid
  local state=`sudo rkt list | grep -i $uuid | awk '{print $4}'`
  while [[ "$state" == "running" ]]; do
    sudo rkt stop $uuid
    state=`sudo rkt list | grep -i 92b4bd88 | awk '{print $4}'`
    sleep 1
  done

  #unmount !!! rootfs that aren't unmounted properly
  sudo df -h | grep -i run/$uuid | awk '{print $6}' | xargs sudo umount -l 2>&1 > /dev/null || true 

  echo "Exporting $uuid to aci"
  sudo rkt export --overwrite $uuid $outputAci

  echo "Updateing manifest"
  tar -xvf $outputAci manifest

  jq ".annotations=([.annotations[] | select (.name == \"created\") .value=\"$created\"])" manifest  | \
  jq ".labels=([.labels[] | select (.name==\"version\") .value=\"$version\"])" | \
  jq ".name = \"$project\"" | \
  jq ".app.exec = [\"/usr/bin/$project\",\"start\"]" | \
  jq ".acVersion = \"$acVersion\"" | \
  sudo tee manifest.new
  actool patch-manifest --replace --manifest=manifest.new $outputAci

  rm manifest manifest.new
  sudo rkt run --insecure-options=all $outputAci
}

restore() {
  local backupFile="$1"
  local backupFolder=`mktemp -d`

  [ ! -e $backupFile ] && exit 1
  
  unzip $backupFile -d $backupFolder

  cp $backupFolder/custom/conf/app.ini $GITEA_WORK_DIR/conf/app.ini  
  cp -rv $backupFolder/data $GITEA_WORK_DIR/ 
  unzip  -o $backupFolder/gitea-repo.zip -d $GITEA_WORK_DIR/ 

  mv $GITEA_WORK_DIR/data/gitea.db{,.bak} 
  sqlite3 $GITEA_WORK_DIR/data/gitea.db < $backupFolder/gitea-db.sql 

  chown -R gitea:gitea $GITEA_WORK_DIR
  wait

  rm -rf $backupFolder
}

build() {
  rm -rf /usr/share/libalpm/hooks/package-cleanup.hook

  installPkg
  downloadGiteaPkg
  userSetup

  local project="$(basename `git rev-parse --show-toplevel`)"
  cp $0 /usr/bin/$project
}

_depCheck() {
  for tool in $@; do
    type ${tool}>/dev/null 2>&1 || { echo >&2 "I require ${tool} but it's not installed.  Aborting."; exit 1; }
  done
}

main() {

  $1 ${@:2}
}

main $@
